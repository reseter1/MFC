import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence, useAnimation } from 'framer-motion';
import { APP_NAME, PROVIDER_URL } from '../data/constant';

const NewChat = () => {
    const greetings = [
        `Xin ch√†o, t√¥i l√† ${APP_NAME}, t√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?`,
        "Ng√†y h√¥m nay th·∫≠t ƒë·∫πp ph·∫£i kh√¥ng, b·∫°n c√≥ th·ªÉ n√≥i g√¨ v·ªÅ ng√†y h√¥m nay?",
        "Th·∫≠t vui khi ƒë∆∞·ª£c g·∫∑p b·∫°n ·ªü ƒë√¢y, ƒëi·ªÅu g√¨ khi·∫øn b·∫°n th·∫Øc m·∫Øc?",
        "B·∫°n th·∫≠t chƒÉm ch·ªâ h·ªçc t·∫≠p, v·∫•n ƒë·ªÅ hi·ªán t·∫°i c·ªßa b·∫°n l√† g√¨?",
        "H√£y l√†m vi·ªác nƒÉng su·∫•t nh√©, t√¥i s·∫Ω lu√¥n ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ b·∫°n!"
    ];

    const notes = [
        `B·∫≠t m√≠ cho b·∫°n, t√¥i ·ªü ƒë√¢y v√¨ ng∆∞·ªùi l·∫≠p tr√¨nh ra t√¥i ƒëang th·∫•t nghi·ªáp v√† anh ta qu√° r·∫£nh r·ªói n√™n ƒë√£ t·∫°o ra t√¥i!`,
        `<b>${APP_NAME}</b> c√≥ th·ªÉ m·∫Øc l·ªói!`,
        `<b>${APP_NAME}</b> ƒëang trong giai ƒëo·∫°n th·ª≠ nghi·ªám! ƒê·ª´ng kh·∫Øc khe v·ªõi t√¥i qu√° nh√©!`,
        `B·∫°n h√£y lu√¥n c·ªë g·∫Øng h·∫øt m√¨nh cho ƒë·∫øn khi g·∫∑p m·ªôt ng∆∞·ªùi kh√°c, b·∫°n kh√¥ng c·∫ßn gi·ªõi thi·ªáu b·∫£n th√¢n l√† ai c·∫£!`,
        `${APP_NAME} ƒë∆∞·ª£c t·∫°o ra b·ªüi <b>Reseter - Nguy·ªÖn H·ªØu T√†i</b>!`,
        `Hi·ªán t·∫°i ng∆∞·ªùi t·∫°o ra t√¥i v·∫´n ƒëang th·∫•t nghi·ªáp, n√™n n·∫øu c√≥ job th√¨ b·∫°n c√≥ th·ªÉ li√™n h·ªá anh ta qua ƒë·ªãa ch·ªâ email <b>nguyenhuutai@reseter.space</b> nh√©! Hihi!`
    ];

    const [currentGreetingIndex, setCurrentGreetingIndex] = useState(0);
    const [currentNoteIndex, setCurrentNoteIndex] = useState(0);
    const [isHovered, setIsHovered] = useState(false);
    const controls = useAnimation();

    const getRandomIndex = (length) => Math.floor(Math.random() * length);

    useEffect(() => {
        const greetingInterval = setInterval(() => {
            setCurrentGreetingIndex(getRandomIndex(greetings.length));
        }, 7000);
        const noteInterval = setInterval(() => {
            setCurrentNoteIndex(getRandomIndex(notes.length));
        }, 5000);

        controls.start({
            opacity: 1,
            y: 0,
            transition: { duration: 0.8, ease: "easeOut" }
        });

        return () => {
            clearInterval(greetingInterval);
            clearInterval(noteInterval);
        };
    }, [greetings.length, notes.length]);

    const containerVariants = {
        hidden: { opacity: 0 },
        show: {
            opacity: 1,
            transition: {
                staggerChildren: 0.1
            }
        }
    };

    const cardVariants = {
        hidden: { opacity: 0, y: 20 },
        show: { opacity: 1, y: 0, transition: { duration: 0.5 } }
    };

    const floatingAnimation = {
        y: [0, -10, 0],
        rotate: [0, 5, 0, -5, 0],
        transition: {
            duration: 5,
            repeat: Infinity,
            repeatType: "reverse"
        }
    };

    return (
        <div
            className="flex-1 overflow-auto p-4 flex items-center justify-center relative bg-white"
            style={{ zIndex: 1 }}
        >
            <motion.div
                initial={{ opacity: 0, y: 50 }}
                animate={controls}
                className="max-w-2xl w-full"
            >
                <motion.div
                    className="text-center relative"
                >
                    <motion.div
                        className="mb-4 md:mb-8"
                        whileHover={{ scale: 1.1 }}
                        animate={floatingAnimation}
                    >
                        <motion.img
                            initial={{ opacity: 0, scale: 0.5 }}
                            animate={{ opacity: 1, scale: 1 }}
                            transition={{ duration: 0.8, delay: 0.2 }}
                            src="https://openfxt.vercel.app/images/favicon.png"
                            alt="Logo"
                            className="mx-auto h-16 w-16 md:h-20 md:w-20 drop-shadow-lg"
                            style={{ filter: "drop-shadow(0px 5px 15px rgba(59, 130, 246, 0.5))" }}
                            onMouseEnter={() => setIsHovered(true)}
                            onMouseLeave={() => setIsHovered(false)}
                        />

                        {/* Glow effect */}
                        <motion.div
                            className="absolute top-0 left-1/2 -translate-x-1/2 w-20 h-20 md:w-24 md:h-24 rounded-full bg-blue-400 opacity-25 blur-xl -z-10"
                            animate={{
                                scale: isHovered ? 1.5 : 1,
                                opacity: isHovered ? 0.4 : 0.25
                            }}
                        />
                    </motion.div>

                    <AnimatePresence mode="wait">
                        <motion.h2
                            key={currentGreetingIndex}
                            initial={{ opacity: 0, y: 10 }}
                            animate={{
                                opacity: 1,
                                y: 0,
                                scale: [1, 1.03, 1]
                            }}
                            exit={{ opacity: 0, y: -10 }}
                            transition={{ duration: 0.5 }}
                            className="text-xl md:text-2xl font-bold mb-3 md:mb-6 text-gray-800 bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-indigo-600"
                        >
                            {greetings[currentGreetingIndex]}
                        </motion.h2>
                    </AnimatePresence>

                    <AnimatePresence mode="wait">
                        <motion.p
                            key={currentNoteIndex}
                            initial={{ opacity: 0 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.5 }}
                            className="text-sm md:text-md text-gray-600 mt-2 mb-4 md:mb-6 px-2 md:px-4"
                            dangerouslySetInnerHTML={{ __html: notes[currentNoteIndex] }}
                        />
                    </AnimatePresence>

                    {/* Feature cards */}
                    <motion.div
                        className="grid grid-cols-1 md:grid-cols-2 gap-2 md:gap-4 mt-6 md:mt-10 px-2 md:px-4"
                        variants={containerVariants}
                        initial="hidden"
                        animate="show"
                    >
                        {[
                            { icon: "üí¨", title: "Chat th√¥ng minh", desc: "Tr√≤ chuy·ªán v·ªõi AI ti√™n ti·∫øn" },
                            { icon: "üîç", title: "T√¨m ki·∫øm", desc: "T√¨m ki·∫øm th√¥ng tin nhanh ch√≥ng" },
                            { icon: "üìÅ", title: "Qu·∫£n l√Ω file", desc: "Truy c·∫≠p d·ªÖ d√†ng v√†o file c·ªßa b·∫°n" },
                            { icon: "‚ö°", title: "Th√¥ng minh", desc: "H·ªçc h·ªèi v√† th√≠ch nghi theo th·ªùi gian" }
                        ].map((feature, index) => (
                            <motion.div
                                key={index}
                                className="bg-white p-3 md:p-4 rounded-lg shadow-md hover:shadow-lg transition-shadow"
                                variants={cardVariants}
                                whileHover={{
                                    y: -5,
                                    boxShadow: "0 10px 25px -5px rgba(59, 130, 246, 0.1), 0 8px 10px -6px rgba(59, 130, 246, 0.1)"
                                }}
                            >
                                <div className="text-xl md:text-2xl mb-1 md:mb-2">{feature.icon}</div>
                                <h3 className="font-semibold text-sm md:text-base text-gray-800">{feature.title}</h3>
                                <p className="text-xs md:text-sm text-gray-600">{feature.desc}</p>
                            </motion.div>
                        ))}
                    </motion.div>
                </motion.div>
            </motion.div>
        </div>
    );
};

export default NewChat;